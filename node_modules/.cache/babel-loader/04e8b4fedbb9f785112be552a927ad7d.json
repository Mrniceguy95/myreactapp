{"ast":null,"code":"var escodegen = require(\"escodegen\");\n\nvar esprima = require(\"esprima\");\n\nvar Syntax = esprima.Syntax;\nmodule.exports = {\n  test: function (node) {\n    return node.type === Syntax.CallExpression && node.callee.type === Syntax.MemberExpression && node.callee.object.type === Syntax.Identifier && node.callee.object.name === \"Globalize\" && node.callee.property.type === Syntax.Identifier && (node.callee.property.name === \"currencyFormatter\" || node.callee.property.name === \"dateFormatter\" || node.callee.property.name === \"dateParser\" || node.callee.property.name === \"dateToPartsFormatter\" || node.callee.property.name === \"numberFormatter\" || node.callee.property.name === \"numberParser\" || node.callee.property.name === \"pluralGenerator\" || node.callee.property.name === \"relativeTimeFormatter\" || node.callee.property.name === \"unitFormatter\");\n  },\n  getFormatterOrParser: function (node) {\n    return \"Globalize.\" + node.callee.property.name + \"(\" + node.arguments.map(function (argument) {\n      return escodegen.generate(argument);\n    }).join(\", \") + \")\";\n  }\n};","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/globalize-compiler/lib/extract-visitors/global-various-formatters-and-parsers.js"],"names":["escodegen","require","esprima","Syntax","module","exports","test","node","type","CallExpression","callee","MemberExpression","object","Identifier","name","property","getFormatterOrParser","arguments","map","argument","generate","join"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAE,WAAF,CAAvB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAE,SAAF,CAArB;;AAEA,IAAIE,MAAM,GAAGD,OAAO,CAACC,MAArB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAChBC,EAAAA,IAAI,EAAE,UAAUC,IAAV,EAAiB;AACtB,WAAOA,IAAI,CAACC,IAAL,KAAcL,MAAM,CAACM,cAArB,IACNF,IAAI,CAACG,MAAL,CAAYF,IAAZ,KAAqBL,MAAM,CAACQ,gBADtB,IAENJ,IAAI,CAACG,MAAL,CAAYE,MAAZ,CAAmBJ,IAAnB,KAA4BL,MAAM,CAACU,UAF7B,IAGNN,IAAI,CAACG,MAAL,CAAYE,MAAZ,CAAmBE,IAAnB,KAA4B,WAHtB,IAINP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBP,IAArB,KAA8BL,MAAM,CAACU,UAJ/B,KAKLN,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,mBAA9B,IACAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,eAD9B,IAEAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,YAF9B,IAGAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,sBAH9B,IAIAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,iBAJ9B,IAKAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,cAL9B,IAMAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,iBAN9B,IAOAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,uBAP9B,IAQAP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8B,eAbzB,CAAP;AAeA,GAjBe;AAmBhBE,EAAAA,oBAAoB,EAAE,UAAUT,IAAV,EAAiB;AACtC,WAAO,eAAeA,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAApC,GAA2C,GAA3C,GACNP,IAAI,CAACU,SAAL,CAAeC,GAAf,CAAmB,UAAUC,QAAV,EAAqB;AACvC,aAAOnB,SAAS,CAACoB,QAAV,CAAoBD,QAApB,CAAP;AACA,KAFD,EAEGE,IAFH,CAES,IAFT,CADM,GAIN,GAJD;AAKA;AAzBe,CAAjB","sourcesContent":["var escodegen = require( \"escodegen\" );\nvar esprima = require( \"esprima\" );\n\nvar Syntax = esprima.Syntax;\n\nmodule.exports = {\n\ttest: function( node ) {\n\t\treturn node.type === Syntax.CallExpression &&\n\t\t\tnode.callee.type === Syntax.MemberExpression &&\n\t\t\tnode.callee.object.type === Syntax.Identifier &&\n\t\t\tnode.callee.object.name === \"Globalize\" &&\n\t\t\tnode.callee.property.type === Syntax.Identifier && (\n\t\t\t\tnode.callee.property.name === \"currencyFormatter\" ||\n\t\t\t\tnode.callee.property.name === \"dateFormatter\" ||\n\t\t\t\tnode.callee.property.name === \"dateParser\" ||\n\t\t\t\tnode.callee.property.name === \"dateToPartsFormatter\" ||\n\t\t\t\tnode.callee.property.name === \"numberFormatter\" ||\n\t\t\t\tnode.callee.property.name === \"numberParser\" ||\n\t\t\t\tnode.callee.property.name === \"pluralGenerator\" ||\n\t\t\t\tnode.callee.property.name === \"relativeTimeFormatter\" ||\n\t\t\t\tnode.callee.property.name === \"unitFormatter\"\n\t\t\t);\n\t},\n\n\tgetFormatterOrParser: function( node ) {\n\t\treturn \"Globalize.\" + node.callee.property.name + \"(\" +\n\t\t\tnode.arguments.map(function( argument ) {\n\t\t\t\treturn escodegen.generate( argument );\n\t\t\t}).join( \", \" ) +\n\t\t\t\")\";\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}