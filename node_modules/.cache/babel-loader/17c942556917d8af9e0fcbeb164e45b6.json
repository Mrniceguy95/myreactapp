{"ast":null,"code":"\"use strict\";\n\nconst cldrData = require(\"cldr-data\");\n\nconst fs = require(\"fs\");\n\nconst ianaTzData = require(\"iana-tz-data\");\n\nconst path = require(\"path\");\n\nconst mainFiles = [\"ca-gregorian\", \"currencies\", \"dateFields\", \"numbers\", \"timeZoneNames\", \"units\"];\n\nconst isGlobalizeModule = filepath => {\n  filepath = filepath.split(/[\\/\\\\]/);\n  const i = filepath.lastIndexOf(\"globalize\"); // 1: path should contain \"globalize\",\n  // 2: and it should appear either in the end (e.g., ../globalize) or right\n  // before it (e.g., ../globalize/date).\n\n  return i !== -1\n  /* 1 */\n  && filepath.length - i <= 2\n  /* 2 */\n  ; // eslint-disable-line semi-spacing\n};\n\nmodule.exports = {\n  cldr: locale => {\n    return cldrData.entireSupplemental().concat(mainFiles.map(mainFile => {\n      return cldrData(path.join(\"main\", locale, mainFile));\n    }));\n  },\n  timeZoneData: () => {\n    return ianaTzData;\n  },\n  isGlobalizeModule: isGlobalizeModule,\n  isGlobalizeRuntimeModule: filepath => {\n    filepath = filepath.split(/[\\/\\\\]/);\n    const i = filepath.lastIndexOf(\"globalize-runtime\");\n    const j = filepath.lastIndexOf(\"globalize-runtime.js\"); // Either (1 and 2) or (3 and 4):\n    // 1: path should contain \"globalize-runtime\",\n    // 2: and it should appear right before it (e.g., ../globalize-runtime/date).\n    // 3: path should contain \"globalize-runtime.js\" file,\n    // 4: and it should appear in the end of the filepath.\n\n    return i !== -1\n    /* 1 */\n    && filepath.length - i === 2\n    /* 2 */\n    || j !== -1\n    /* 3 */\n    && filepath.length - j === 1\n    /* 4 */\n    ;\n  },\n  moduleFilterFn: moduleFilter => filepath => {\n    const globalizeModule = isGlobalizeModule(filepath);\n\n    if (moduleFilter) {\n      return !(globalizeModule || moduleFilter(filepath));\n    } else {\n      return !globalizeModule;\n    }\n  },\n  readMessages: (messagesFilepaths, locale) => {\n    let messages = {};\n    const filepaths = [].concat(messagesFilepaths);\n\n    for (let path of filepaths) {\n      path = path.replace(\"[locale]\", locale);\n\n      if (!fs.existsSync(path) || !fs.statSync(path).isFile()) {\n        console.warn(\"Unable to find messages file: `\" + path + \"`\");\n        return null;\n      }\n\n      messages[locale] = Object.assign(messages[locale] || {}, JSON.parse(fs.readFileSync(path))[locale]);\n    }\n\n    return messages;\n  },\n  tmpdir: base => {\n    const tmpdir = path.resolve(path.join(base, \".tmp-globalize-webpack\"));\n\n    if (!fs.existsSync(tmpdir)) {\n      fs.mkdirSync(tmpdir);\n    } else {\n      if (!fs.statSync(tmpdir).isDirectory()) {\n        throw new Error(\"Unable to create temporary directory: `\" + tmpdir + \"`\");\n      }\n    }\n\n    return tmpdir;\n  },\n  escapeRegex: string => string.replace(/(?=[\\/\\\\^$*+?.()|{}[\\]])/g, \"\\\\\")\n};","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/globalize-webpack-plugin/util.js"],"names":["cldrData","require","fs","ianaTzData","path","mainFiles","isGlobalizeModule","filepath","split","i","lastIndexOf","length","module","exports","cldr","locale","entireSupplemental","concat","map","mainFile","join","timeZoneData","isGlobalizeRuntimeModule","j","moduleFilterFn","moduleFilter","globalizeModule","readMessages","messagesFilepaths","messages","filepaths","replace","existsSync","statSync","isFile","console","warn","Object","assign","JSON","parse","readFileSync","tmpdir","base","resolve","mkdirSync","isDirectory","Error","escapeRegex","string"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst cldrData = require(\"cldr-data\");\nconst fs = require(\"fs\");\nconst ianaTzData = require(\"iana-tz-data\");\nconst path = require(\"path\");\n\nconst mainFiles = [\"ca-gregorian\", \"currencies\", \"dateFields\", \"numbers\", \"timeZoneNames\", \"units\"];\n\nconst isGlobalizeModule = (filepath) => {\n  filepath = filepath.split( /[\\/\\\\]/ );\n  const i = filepath.lastIndexOf(\"globalize\");\n  // 1: path should contain \"globalize\",\n  // 2: and it should appear either in the end (e.g., ../globalize) or right\n  // before it (e.g., ../globalize/date).\n  return i !== -1 /* 1 */ && filepath.length - i <= 2 /* 2 */; // eslint-disable-line semi-spacing\n};\n\nmodule.exports = {\n  cldr: (locale) => {\n    return cldrData.entireSupplemental().concat(mainFiles.map((mainFile) => {\n      return cldrData(path.join(\"main\", locale, mainFile));\n    }));\n  },\n\n  timeZoneData: () => {\n    return ianaTzData;\n  },\n\n  isGlobalizeModule: isGlobalizeModule,\n\n  isGlobalizeRuntimeModule: (filepath) => {\n    filepath = filepath.split( /[\\/\\\\]/ );\n    const i = filepath.lastIndexOf(\"globalize-runtime\");\n    const j = filepath.lastIndexOf(\"globalize-runtime.js\");\n    // Either (1 and 2) or (3 and 4):\n    // 1: path should contain \"globalize-runtime\",\n    // 2: and it should appear right before it (e.g., ../globalize-runtime/date).\n    // 3: path should contain \"globalize-runtime.js\" file,\n    // 4: and it should appear in the end of the filepath.\n    return (i !== -1 /* 1 */ && filepath.length - i === 2 /* 2 */) ||\n      (j !== -1 /* 3 */ && filepath.length - j === 1 /* 4 */);\n  },\n\n  moduleFilterFn: (moduleFilter) => (filepath) => {\n    const globalizeModule = isGlobalizeModule(filepath);\n\n    if (moduleFilter) {\n      return !(globalizeModule || moduleFilter(filepath));\n    } else {\n      return !globalizeModule;\n    }\n  },\n\n  readMessages: (messagesFilepaths, locale) => {\n    let messages = {};\n    const filepaths = [].concat(messagesFilepaths);\n\n    for (let path of filepaths) {\n      path = path.replace(\"[locale]\", locale);\n      if (!fs.existsSync(path) || !fs.statSync(path).isFile()) {\n        console.warn(\"Unable to find messages file: `\" + path + \"`\");\n        return null;\n      }\n      messages[locale] = Object.assign(messages[locale] || {}, JSON.parse(fs.readFileSync(path))[locale]);\n    }\n    return messages;\n  },\n\n  tmpdir: (base) => {\n    const tmpdir = path.resolve(path.join(base, \".tmp-globalize-webpack\"));\n    if (!fs.existsSync(tmpdir)) {\n      fs.mkdirSync(tmpdir);\n    } else {\n      if (!fs.statSync(tmpdir).isDirectory()) {\n        throw new Error(\"Unable to create temporary directory: `\" + tmpdir + \"`\");\n      }\n    }\n\n    return tmpdir;\n  },\n\n  escapeRegex: (string) => string.replace(/(?=[\\/\\\\^$*+?.()|{}[\\]])/g, \"\\\\\")\n};\n"]},"metadata":{},"sourceType":"script"}