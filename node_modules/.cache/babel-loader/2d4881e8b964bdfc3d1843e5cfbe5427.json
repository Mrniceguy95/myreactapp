{"ast":null,"code":"const ConstDependency = require(\"webpack/lib/dependencies/ConstDependency\");\n\nclass SkipAMDPlugin {\n  constructor(requestRegExp) {\n    this.requestRegExp = requestRegExp;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"SkipAMDPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      // Note: We're using `this.requestRegExp` instead of a plain `requestRegExp`\n      // variable to allow this variable to be changed dynamically. Because, it\n      // allows the following hacky usage. In other words, it allows one to update\n      // the regular expression on the fly instead of appending more plugins.\n      //\n      // https://github.com/rxaviers/globalize-webpack-plugin/blob/v0.1.1/ProductionModePlugin.js#L78-L92\n      //\n      // TODO: The statement below was true for Tapable, not sure for the new .hooks approach in webpack 4.\n      // This hacky usage shouldn't be needed if it was possible to prepend plugins instead of just appending them.\n      const handler = parser => {\n        parser.hooks.evaluateTypeof.for(\"define\").tap(\"SkipAMDPlugin\", expr => {\n          if (this.requestRegExp.test(parser.state.current.request)) {\n            const res = parser.evaluate(\"typeof (false)\");\n            res.setRange(expr.range);\n            return res;\n          }\n        });\n        parser.hooks.typeof.for(\"define\").tap(\"SkipAMDPlugin\", expr => {\n          if (this.requestRegExp.test(parser.state.current.request)) {\n            const dep = new ConstDependency(\"typeof (false)\", expr.range);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return true;\n          }\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"SkipAMDPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"SkipAMDPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = SkipAMDPlugin;","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/skip-amd-webpack-plugin/index.js"],"names":["ConstDependency","require","SkipAMDPlugin","constructor","requestRegExp","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","evaluateTypeof","for","expr","test","state","current","request","res","evaluate","setRange","range","typeof","dep","loc","addDependency","module","exports"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,0CAAD,CAA/B;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACzB,SAAKA,aAAL,GAAqBA,aAArB;AACD;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACdA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACE,eADF,EAEE,CAACD,WAAD,EAAc;AAAEE,MAAAA;AAAF,KAAd,KAA0C;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAGC,MAAM,IAAI;AACxBA,QAAAA,MAAM,CAACL,KAAP,CAAaM,cAAb,CACGC,GADH,CACO,QADP,EAEGL,GAFH,CAEO,eAFP,EAEwBM,IAAI,IAAI;AAC5B,cAAI,KAAKX,aAAL,CAAmBY,IAAnB,CAAwBJ,MAAM,CAACK,KAAP,CAAaC,OAAb,CAAqBC,OAA7C,CAAJ,EAA2D;AACzD,kBAAMC,GAAG,GAAGR,MAAM,CAACS,QAAP,CAAgB,gBAAhB,CAAZ;AACAD,YAAAA,GAAG,CAACE,QAAJ,CAAaP,IAAI,CAACQ,KAAlB;AACA,mBAAOH,GAAP;AACD;AACF,SARH;AASAR,QAAAA,MAAM,CAACL,KAAP,CAAaiB,MAAb,CAAoBV,GAApB,CAAwB,QAAxB,EAAkCL,GAAlC,CAAsC,eAAtC,EAAuDM,IAAI,IAAI;AAC7D,cAAI,KAAKX,aAAL,CAAmBY,IAAnB,CAAwBJ,MAAM,CAACK,KAAP,CAAaC,OAAb,CAAqBC,OAA7C,CAAJ,EAA2D;AACzD,kBAAMM,GAAG,GAAG,IAAIzB,eAAJ,CAAoB,gBAApB,EAAsCe,IAAI,CAACQ,KAA3C,CAAZ;AACAE,YAAAA,GAAG,CAACC,GAAJ,GAAUX,IAAI,CAACW,GAAf;AACAd,YAAAA,MAAM,CAACK,KAAP,CAAaC,OAAb,CAAqBS,aAArB,CAAmCF,GAAnC;AACA,mBAAO,IAAP;AACD;AACF,SAPD;AAQD,OAlBD;;AAoBAf,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACGE,GADH,CACO,iBADP,EAEGL,GAFH,CAEO,eAFP,EAEwBE,OAFxB;AAGAD,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACGE,GADH,CACO,oBADP,EAEGL,GAFH,CAEO,eAFP,EAEwBE,OAFxB;AAGD,KAtCH;AAwCD;;AA9CiB;;AAiDpBiB,MAAM,CAACC,OAAP,GAAiB3B,aAAjB","sourcesContent":["const ConstDependency = require(\"webpack/lib/dependencies/ConstDependency\");\n\nclass SkipAMDPlugin {\n  constructor(requestRegExp) {\n    this.requestRegExp = requestRegExp;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\n      \"SkipAMDPlugin\",\n      (compilation, { normalModuleFactory }) => {\n        // Note: We're using `this.requestRegExp` instead of a plain `requestRegExp`\n        // variable to allow this variable to be changed dynamically. Because, it\n        // allows the following hacky usage. In other words, it allows one to update\n        // the regular expression on the fly instead of appending more plugins.\n        //\n        // https://github.com/rxaviers/globalize-webpack-plugin/blob/v0.1.1/ProductionModePlugin.js#L78-L92\n        //\n        // TODO: The statement below was true for Tapable, not sure for the new .hooks approach in webpack 4.\n        // This hacky usage shouldn't be needed if it was possible to prepend plugins instead of just appending them.\n        const handler = parser => {\n          parser.hooks.evaluateTypeof\n            .for(\"define\")\n            .tap(\"SkipAMDPlugin\", expr => {\n              if (this.requestRegExp.test(parser.state.current.request)) {\n                const res = parser.evaluate(\"typeof (false)\");\n                res.setRange(expr.range);\n                return res;\n              }\n            });\n          parser.hooks.typeof.for(\"define\").tap(\"SkipAMDPlugin\", expr => {\n            if (this.requestRegExp.test(parser.state.current.request)) {\n              const dep = new ConstDependency(\"typeof (false)\", expr.range);\n              dep.loc = expr.loc;\n              parser.state.current.addDependency(dep);\n              return true;\n            }\n          });\n        };\n\n        normalModuleFactory.hooks.parser\n          .for(\"javascript/auto\")\n          .tap(\"SkipAMDPlugin\", handler);\n        normalModuleFactory.hooks.parser\n          .for(\"javascript/dynamic\")\n          .tap(\"SkipAMDPlugin\", handler);\n      }\n    );\n  }\n}\n\nmodule.exports = SkipAMDPlugin;\n"]},"metadata":{},"sourceType":"script"}