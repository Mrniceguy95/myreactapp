{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar index = require('./index-of');\n/**\r\n * Whitespace regexp.\r\n */\n\n\nvar re = /\\s+/;\n/**\r\n * toString reference.\r\n */\n\nvar toString = Object.prototype.toString;\n/**\r\n * Wrap `el` in a `ClassList`.\r\n *\r\n * @param {Element} el\r\n * @return {ClassList}\r\n * @api public\r\n */\n\nmodule.exports = function (el) {\n  return new ClassList(el);\n};\n/**\r\n * Initialize a new ClassList for `el`.\r\n *\r\n * @param {Element} el\r\n * @api private\r\n */\n\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n\n  this.el = el;\n  this.list = el.classList;\n}\n/**\r\n * Add class `name` if not already present.\r\n *\r\n * @param {String} name\r\n * @return {ClassList}\r\n * @api public\r\n */\n\n\nClassList.prototype.add = function (name) {\n  // classList\n  if (this.list) {\n    this.list.add(name);\n    return this;\n  } // fallback\n\n\n  var arr = this.array();\n  var i = index(arr, name);\n  if (!~i) arr.push(name);\n  this.el.className = arr.join(' ');\n  return this;\n};\n/**\r\n * Remove class `name` when present, or\r\n * pass a regular expression to remove\r\n * any which match.\r\n *\r\n * @param {String|RegExp} name\r\n * @return {ClassList}\r\n * @api public\r\n */\n\n\nClassList.prototype.remove = function (name) {\n  // classList\n  if (this.list) {\n    this.list.remove(name);\n    return this;\n  } // fallback\n\n\n  var arr = this.array();\n  var i = index(arr, name);\n  if (~i) arr.splice(i, 1);\n  this.el.className = arr.join(' ');\n  return this;\n};\n/**\r\n * Toggle class `name`, can force state via `force`.\r\n *\r\n * For browsers that support classList, but do not support `force` yet,\r\n * the mistake will be detected and corrected.\r\n *\r\n * @param {String} name\r\n * @param {Boolean} force\r\n * @return {ClassList}\r\n * @api public\r\n */\n\n\nClassList.prototype.toggle = function (name, force) {\n  // classList\n  if (this.list) {\n    if (\"undefined\" !== typeof force) {\n      if (force !== this.list.toggle(name, force)) {\n        this.list.toggle(name); // toggle again to correct\n      }\n    } else {\n      this.list.toggle(name);\n    }\n\n    return this;\n  } // fallback\n\n\n  if (\"undefined\" !== typeof force) {\n    if (!force) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  } else {\n    if (this.has(name)) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  }\n\n  return this;\n};\n/**\r\n * Return an array of classes.\r\n *\r\n * @return {Array}\r\n * @api public\r\n */\n\n\nClassList.prototype.array = function () {\n  var className = this.el.getAttribute('class') || '';\n  var str = className.replace(/^\\s+|\\s+$/g, '');\n  var arr = str.split(re);\n  if ('' === arr[0]) arr.shift();\n  return arr;\n};\n/**\r\n * Check if class `name` is present.\r\n *\r\n * @param {String} name\r\n * @return {ClassList}\r\n * @api public\r\n */\n\n\nClassList.prototype.has = ClassList.prototype.contains = function (name) {\n  return this.list ? this.list.contains(name) : !!~index(this.array(), name);\n};","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Guido/myreactapp/node_modules/list.js/src/utils/classes.js"],"names":["index","require","re","toString","Object","prototype","module","exports","el","ClassList","nodeType","Error","list","classList","add","name","arr","array","i","push","className","join","remove","splice","toggle","force","has","getAttribute","str","replace","split","shift","contains"],"mappings":"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","sourcesContent":["/**\r\n * Module dependencies.\r\n */\r\n\r\nvar index = require('./index-of');\r\n\r\n/**\r\n * Whitespace regexp.\r\n */\r\n\r\nvar re = /\\s+/;\r\n\r\n/**\r\n * toString reference.\r\n */\r\n\r\nvar toString = Object.prototype.toString;\r\n\r\n/**\r\n * Wrap `el` in a `ClassList`.\r\n *\r\n * @param {Element} el\r\n * @return {ClassList}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(el){\r\n  return new ClassList(el);\r\n};\r\n\r\n/**\r\n * Initialize a new ClassList for `el`.\r\n *\r\n * @param {Element} el\r\n * @api private\r\n */\r\n\r\nfunction ClassList(el) {\r\n  if (!el || !el.nodeType) {\r\n    throw new Error('A DOM element reference is required');\r\n  }\r\n  this.el = el;\r\n  this.list = el.classList;\r\n}\r\n\r\n/**\r\n * Add class `name` if not already present.\r\n *\r\n * @param {String} name\r\n * @return {ClassList}\r\n * @api public\r\n */\r\n\r\nClassList.prototype.add = function(name){\r\n  // classList\r\n  if (this.list) {\r\n    this.list.add(name);\r\n    return this;\r\n  }\r\n\r\n  // fallback\r\n  var arr = this.array();\r\n  var i = index(arr, name);\r\n  if (!~i) arr.push(name);\r\n  this.el.className = arr.join(' ');\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove class `name` when present, or\r\n * pass a regular expression to remove\r\n * any which match.\r\n *\r\n * @param {String|RegExp} name\r\n * @return {ClassList}\r\n * @api public\r\n */\r\n\r\nClassList.prototype.remove = function(name){\r\n  // classList\r\n  if (this.list) {\r\n    this.list.remove(name);\r\n    return this;\r\n  }\r\n\r\n  // fallback\r\n  var arr = this.array();\r\n  var i = index(arr, name);\r\n  if (~i) arr.splice(i, 1);\r\n  this.el.className = arr.join(' ');\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Toggle class `name`, can force state via `force`.\r\n *\r\n * For browsers that support classList, but do not support `force` yet,\r\n * the mistake will be detected and corrected.\r\n *\r\n * @param {String} name\r\n * @param {Boolean} force\r\n * @return {ClassList}\r\n * @api public\r\n */\r\n\r\nClassList.prototype.toggle = function(name, force){\r\n  // classList\r\n  if (this.list) {\r\n    if (\"undefined\" !== typeof force) {\r\n      if (force !== this.list.toggle(name, force)) {\r\n        this.list.toggle(name); // toggle again to correct\r\n      }\r\n    } else {\r\n      this.list.toggle(name);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // fallback\r\n  if (\"undefined\" !== typeof force) {\r\n    if (!force) {\r\n      this.remove(name);\r\n    } else {\r\n      this.add(name);\r\n    }\r\n  } else {\r\n    if (this.has(name)) {\r\n      this.remove(name);\r\n    } else {\r\n      this.add(name);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return an array of classes.\r\n *\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nClassList.prototype.array = function(){\r\n  var className = this.el.getAttribute('class') || '';\r\n  var str = className.replace(/^\\s+|\\s+$/g, '');\r\n  var arr = str.split(re);\r\n  if ('' === arr[0]) arr.shift();\r\n  return arr;\r\n};\r\n\r\n/**\r\n * Check if class `name` is present.\r\n *\r\n * @param {String} name\r\n * @return {ClassList}\r\n * @api public\r\n */\r\n\r\nClassList.prototype.has =\r\nClassList.prototype.contains = function(name){\r\n  return this.list ? this.list.contains(name) : !! ~index(this.array(), name);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}