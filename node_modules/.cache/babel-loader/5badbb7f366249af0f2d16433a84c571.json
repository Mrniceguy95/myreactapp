{"ast":null,"code":"/**\n * Npm module for Unicode CLDR JSON data\n *\n * Copyright 2013 Rafael Xavier de Souza\n * Released under the MIT license\n * https://github.com/rxaviers/cldr-data-npm/blob/master/LICENSE-MIT\n */\n\"use strict\";\n\nvar JSON_EXTENSION = /^(.*)\\.json$/;\n\nvar assert = require(\"assert\");\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nfunction argsToArray(arg) {\n  return [].slice.call(arg, 0);\n}\n\nfunction flatten(obj) {\n  var arr = [];\n\n  function _flatten(obj, arr) {\n    if (Array.isArray(obj)) {\n      return obj.forEach(function (obj) {\n        _flatten(obj, arr);\n      });\n    }\n\n    arr.push(obj);\n  }\n\n  _flatten(obj, arr);\n\n  return arr;\n}\n\nfunction jsonFiles(dirName) {\n  var fileList = _fs.readdirSync(_path.join(__dirname, dirName));\n\n  return fileList.reduce(function (sum, file) {\n    if (JSON_EXTENSION.test(file)) {\n      return sum.concat(file.match(JSON_EXTENSION)[1]);\n    }\n  }, []);\n}\n\nfunction cldrData(path\n/*, ...*/\n) {\n  assert(typeof path === \"string\", \"must include path (e.g., \" + \"\\\"main/en/numbers\\\" or \\\"supplemental/likelySubtags\\\")\");\n\n  if (arguments.length > 1) {\n    return argsToArray(arguments).reduce(function (sum, path) {\n      sum.push(cldrData(path));\n      return sum;\n    }, []);\n  }\n\n  return require(\"./\" + path);\n}\n\nfunction mainPathsFor(locales) {\n  return locales.reduce(function (sum, locale) {\n    var mainFiles = jsonFiles(_path.join(\"main\", locale));\n    mainFiles.forEach(function (mainFile) {\n      sum.push(_path.join(\"main\", locale, mainFile));\n    });\n    return sum;\n  }, []);\n}\n\nfunction supplementalPaths() {\n  var supplementalFiles = jsonFiles(\"supplemental\");\n  return supplementalFiles.map(function (supplementalFile) {\n    return _path.join(\"supplemental\", supplementalFile);\n  });\n}\n\nObject.defineProperty(cldrData, \"availableLocales\", {\n  get: function () {\n    return cldrData(\"availableLocales\").availableLocales;\n  }\n});\n\ncldrData.all = function () {\n  var paths = supplementalPaths().concat(mainPathsFor(this.availableLocales));\n  return cldrData.apply({}, paths);\n};\n\ncldrData.entireMainFor = function (locale\n/*, ...*/\n) {\n  assert(typeof locale === \"string\", \"must include locale (e.g., \" + \"\\\"en\\\")\");\n  return cldrData.apply({}, mainPathsFor(argsToArray(arguments)));\n};\n\ncldrData.entireSupplemental = function () {\n  return cldrData.apply({}, supplementalPaths());\n};\n\nmodule.exports = cldrData;","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/cldr-data/index.js"],"names":["JSON_EXTENSION","assert","require","_fs","_path","argsToArray","arg","slice","call","flatten","obj","arr","_flatten","Array","isArray","forEach","push","jsonFiles","dirName","fileList","readdirSync","join","__dirname","reduce","sum","file","test","concat","match","cldrData","path","arguments","length","mainPathsFor","locales","locale","mainFiles","mainFile","supplementalPaths","supplementalFiles","map","supplementalFile","Object","defineProperty","get","availableLocales","all","paths","apply","entireMainFor","entireSupplemental","module","exports"],"mappings":"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","sourcesContent":["/**\n * Npm module for Unicode CLDR JSON data\n *\n * Copyright 2013 Rafael Xavier de Souza\n * Released under the MIT license\n * https://github.com/rxaviers/cldr-data-npm/blob/master/LICENSE-MIT\n */\n\n\"use strict\";\n\nvar JSON_EXTENSION = /^(.*)\\.json$/;\n\nvar assert = require(\"assert\");\nvar _fs = require(\"fs\");\nvar _path = require(\"path\");\n\nfunction argsToArray(arg) {\n  return [].slice.call(arg, 0);\n}\n\nfunction flatten(obj) {\n  var arr = [];\n  function _flatten(obj, arr) {\n    if(Array.isArray(obj)) {\n      return obj.forEach(function(obj) {\n        _flatten(obj, arr);\n      });\n    }\n    arr.push(obj);\n  }\n  _flatten(obj, arr);\n  return arr;\n}\n\nfunction jsonFiles(dirName) {\n  var fileList = _fs.readdirSync(_path.join(__dirname, dirName));\n\n  return fileList.reduce(function(sum, file) {\n    if (JSON_EXTENSION.test(file)) {\n      return sum.concat(file.match(JSON_EXTENSION)[1]);\n    }\n  }, []);\n}\n\nfunction cldrData(path/*, ...*/) {\n  assert(typeof path === \"string\", \"must include path (e.g., \" +\n    \"\\\"main/en/numbers\\\" or \\\"supplemental/likelySubtags\\\")\");\n\n  if (arguments.length > 1) {\n    return argsToArray(arguments).reduce(function(sum, path) {\n      sum.push(cldrData(path));\n      return sum;\n    }, []);\n  }\n  return require(\"./\" + path);\n}\n\nfunction mainPathsFor(locales) {\n  return locales.reduce(function(sum, locale) {\n    var mainFiles = jsonFiles(_path.join(\"main\", locale));\n    mainFiles.forEach(function(mainFile) {\n      sum.push(_path.join(\"main\", locale, mainFile));\n    });\n    return sum;\n  }, []);\n}\n\nfunction supplementalPaths() {\n  var supplementalFiles = jsonFiles(\"supplemental\");\n\n  return supplementalFiles.map(function(supplementalFile) {\n    return _path.join(\"supplemental\", supplementalFile);\n  });\n}\n\nObject.defineProperty(cldrData, \"availableLocales\", {\n  get: function() {\n    return cldrData(\"availableLocales\").availableLocales;\n  }\n});\n\ncldrData.all = function() {\n  var paths = supplementalPaths().concat(mainPathsFor(this.availableLocales));\n  return cldrData.apply({}, paths);\n}\n\ncldrData.entireMainFor = function(locale/*, ...*/) {\n  assert(typeof locale === \"string\", \"must include locale (e.g., \" +\n    \"\\\"en\\\")\");\n  return cldrData.apply({}, mainPathsFor(argsToArray(arguments)));\n}\n\ncldrData.entireSupplemental = function() {\n  return cldrData.apply({}, supplementalPaths());\n}\n\nmodule.exports = cldrData;\n"]},"metadata":{},"sourceType":"script"}