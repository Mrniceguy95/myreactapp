{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onResult,\n    onDone,\n    rethrowIfPossible\n  }) {\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onResult: (i, result, next) => `if(${result} !== undefined) {\\n${onResult(result)};\\n} else {\\n${next()}}\\n`,\n      onDone,\n      rethrowIfPossible\n    });\n  }\n\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nclass SyncBailHook extends Hook {\n  tapAsync() {\n    throw new Error(\"tapAsync is not supported on a SyncBailHook\");\n  }\n\n  tapPromise() {\n    throw new Error(\"tapPromise is not supported on a SyncBailHook\");\n  }\n\n  compile(options) {\n    factory.setup(this, options);\n    return factory.create(options);\n  }\n\n}\n\nmodule.exports = SyncBailHook;","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/globalize-webpack-plugin/node_modules/tapable/lib/SyncBailHook.js"],"names":["Hook","require","HookCodeFactory","SyncBailHookCodeFactory","content","onError","onResult","onDone","rethrowIfPossible","callTapsSeries","i","err","result","next","factory","SyncBailHook","tapAsync","Error","tapPromise","compile","options","setup","create","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,uBAAN,SAAsCD,eAAtC,CAAsD;AACrDE,EAAAA,OAAO,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,GAAD,EAAmD;AACzD,WAAO,KAAKC,cAAL,CAAoB;AAC1BJ,MAAAA,OAAO,EAAE,CAACK,CAAD,EAAIC,GAAJ,KAAYN,OAAO,CAACM,GAAD,CADF;AAE1BL,MAAAA,QAAQ,EAAE,CAACI,CAAD,EAAIE,MAAJ,EAAYC,IAAZ,KAAsB,MAAKD,MAAO,sBAAqBN,QAAQ,CAACM,MAAD,CAAS,gBAAeC,IAAI,EAAG,KAF9E;AAG1BN,MAAAA,MAH0B;AAI1BC,MAAAA;AAJ0B,KAApB,CAAP;AAMA;;AARoD;;AAWtD,MAAMM,OAAO,GAAG,IAAIX,uBAAJ,EAAhB;;AAEA,MAAMY,YAAN,SAA2Bf,IAA3B,CAAgC;AAC/BgB,EAAAA,QAAQ,GAAG;AACV,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA;;AAEDC,EAAAA,UAAU,GAAG;AACZ,UAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACA;;AAEDE,EAAAA,OAAO,CAACC,OAAD,EAAU;AAChBN,IAAAA,OAAO,CAACO,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,WAAON,OAAO,CAACQ,MAAR,CAAeF,OAAf,CAAP;AACA;;AAZ8B;;AAehCG,MAAM,CAACC,OAAP,GAAiBT,YAAjB","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\"use strict\";\r\n\r\nconst Hook = require(\"./Hook\");\r\nconst HookCodeFactory = require(\"./HookCodeFactory\");\r\n\r\nclass SyncBailHookCodeFactory extends HookCodeFactory {\r\n\tcontent({ onError, onResult, onDone, rethrowIfPossible }) {\r\n\t\treturn this.callTapsSeries({\r\n\t\t\tonError: (i, err) => onError(err),\r\n\t\t\tonResult: (i, result, next) => `if(${result} !== undefined) {\\n${onResult(result)};\\n} else {\\n${next()}}\\n`,\r\n\t\t\tonDone,\r\n\t\t\trethrowIfPossible\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst factory = new SyncBailHookCodeFactory();\r\n\r\nclass SyncBailHook extends Hook {\r\n\ttapAsync() {\r\n\t\tthrow new Error(\"tapAsync is not supported on a SyncBailHook\");\r\n\t}\r\n\r\n\ttapPromise() {\r\n\t\tthrow new Error(\"tapPromise is not supported on a SyncBailHook\");\r\n\t}\r\n\r\n\tcompile(options) {\r\n\t\tfactory.setup(this, options);\r\n\t\treturn factory.create(options);\r\n\t}\r\n}\r\n\r\nmodule.exports = SyncBailHook;\r\n"]},"metadata":{},"sourceType":"script"}