{"ast":null,"code":"\"use strict\";\n\nconst CommonJsRequireDependency = require(\"webpack/lib/dependencies/CommonJsRequireDependency\");\n\nconst RequireHeaderDependency = require(\"webpack/lib/dependencies/RequireHeaderDependency\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst SkipAMDPlugin = require(\"skip-amd-webpack-plugin\");\n\nconst util = require(\"./util\");\n/**\n * Development Mode:\n * - Automatically loads CLDR data (i.e., injects `Globalize.load(<necessary CLDR data>)`).\n * - Automatically define default locale (i.e., injects `Globalize.locale(<defaultLocale>)`).\n */\n\n\nclass DevelopmentModePlugin {\n  constructor(attributes) {\n    let i18nDataTemplate, messages;\n    const cldr = attributes.cldr || util.cldr;\n    const timeZoneData = attributes.timeZoneData || util.timeZoneData;\n    const tmpdirBase = attributes.tmpdirBase || \".\";\n    const tmpdir = util.tmpdir(tmpdirBase);\n    messages = attributes.messages && util.readMessages(attributes.messages, attributes.developmentLocale);\n    i18nDataTemplate = [\"var Globalize = require(\\\"globalize\\\");\", \"\", `Globalize.load(${JSON.stringify(cldr(attributes.developmentLocale))});`, messages ? `Globalize.loadMessages(${JSON.stringify(messages)});` : \"\", `Globalize.loadTimeZone(${JSON.stringify(timeZoneData())});`, `Globalize.locale(${JSON.stringify(attributes.developmentLocale)});`, \"\", \"module.exports = Globalize;\"].join(\"\\n\");\n    this.i18nData = path.join(tmpdir, \"dev-i18n-data.js\");\n    this.moduleFilter = util.moduleFilterFn(attributes.moduleFilter);\n    fs.writeFileSync(this.i18nData, i18nDataTemplate);\n  }\n\n  apply(compiler) {\n    // Skip AMD part of Globalize Runtime UMD wrapper.\n    const skipAMDPlugin = new SkipAMDPlugin(/(^|[\\/\\\\])globalize($|[\\/\\\\])/);\n    skipAMDPlugin.apply(compiler); // \"Intercepts\" all `require(\"globalize\")` by transforming them into a\n    // `require` to our custom generated template, which in turn requires\n    // Globalize, loads CLDR, set the default locale and then exports the\n    // Globalize object.\n\n    compiler.hooks.normalModuleFactory.tap(\"GlobalizePlugin\", factory => {\n      factory.hooks.parser.for(\"javascript/auto\").tap(\"GlobalizePlugin\", parser => {\n        parser.hooks.call.for(\"require\").tap(\"GlobalizePlugin\", expr => {\n          if (expr.arguments.length !== 1) {\n            return;\n          }\n\n          const param = parser.evaluateExpression(expr.arguments[0]);\n          const request = parser.state.current.request;\n\n          if (param.isString() && param.string === \"globalize\" && this.moduleFilter(request) && !new RegExp(util.escapeRegex(this.i18nData)).test(request)) {\n            // Replace \"globalize\" with the dev bundle\n            const dep1 = new CommonJsRequireDependency(this.i18nData, param.range);\n            dep1.loc = expr.loc;\n            dep1.optional = !!parser.scope.inTry;\n            parser.state.current.addDependency(dep1); // Replace 'require' by '__webpack_require__'\n\n            const dep2 = new RequireHeaderDependency(expr.callee.range);\n            dep2.loc = expr.loc;\n            parser.state.current.addDependency(dep2);\n            return true;\n          }\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = DevelopmentModePlugin;","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/globalize-webpack-plugin/DevelopmentModePlugin.js"],"names":["CommonJsRequireDependency","require","RequireHeaderDependency","fs","path","SkipAMDPlugin","util","DevelopmentModePlugin","constructor","attributes","i18nDataTemplate","messages","cldr","timeZoneData","tmpdirBase","tmpdir","readMessages","developmentLocale","JSON","stringify","join","i18nData","moduleFilter","moduleFilterFn","writeFileSync","apply","compiler","skipAMDPlugin","hooks","normalModuleFactory","tap","factory","parser","for","call","expr","arguments","length","param","evaluateExpression","request","state","current","isString","string","RegExp","escapeRegex","test","dep1","range","loc","optional","scope","inTry","addDependency","dep2","callee","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst CommonJsRequireDependency = require(\"webpack/lib/dependencies/CommonJsRequireDependency\");\nconst RequireHeaderDependency = require(\"webpack/lib/dependencies/RequireHeaderDependency\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst SkipAMDPlugin = require(\"skip-amd-webpack-plugin\");\nconst util = require(\"./util\");\n\n/**\n * Development Mode:\n * - Automatically loads CLDR data (i.e., injects `Globalize.load(<necessary CLDR data>)`).\n * - Automatically define default locale (i.e., injects `Globalize.locale(<defaultLocale>)`).\n */\nclass DevelopmentModePlugin {\n  constructor(attributes) {\n    let i18nDataTemplate, messages;\n    const cldr = attributes.cldr || util.cldr;\n    const timeZoneData = attributes.timeZoneData || util.timeZoneData;\n    const tmpdirBase = attributes.tmpdirBase || \".\";\n    const tmpdir = util.tmpdir(tmpdirBase);\n\n    messages = attributes.messages && util.readMessages(attributes.messages, attributes.developmentLocale);\n\n    i18nDataTemplate = [\n      \"var Globalize = require(\\\"globalize\\\");\",\n      \"\",\n      `Globalize.load(${JSON.stringify(cldr(attributes.developmentLocale))});`,\n      messages ? `Globalize.loadMessages(${JSON.stringify(messages)});` : \"\",\n      `Globalize.loadTimeZone(${JSON.stringify(timeZoneData())});`,\n      `Globalize.locale(${JSON.stringify(attributes.developmentLocale)});`,\n      \"\",\n      \"module.exports = Globalize;\"\n    ].join(\"\\n\");\n\n    this.i18nData = path.join(tmpdir, \"dev-i18n-data.js\");\n    this.moduleFilter = util.moduleFilterFn(attributes.moduleFilter);\n    fs.writeFileSync(this.i18nData, i18nDataTemplate);\n  }\n\n  apply(compiler) {\n    // Skip AMD part of Globalize Runtime UMD wrapper.\n    const skipAMDPlugin = new SkipAMDPlugin(/(^|[\\/\\\\])globalize($|[\\/\\\\])/);\n    skipAMDPlugin.apply(compiler);\n\n    // \"Intercepts\" all `require(\"globalize\")` by transforming them into a\n    // `require` to our custom generated template, which in turn requires\n    // Globalize, loads CLDR, set the default locale and then exports the\n    // Globalize object.\n    compiler.hooks.normalModuleFactory.tap(\"GlobalizePlugin\", factory => {\n      factory.hooks.parser.for(\"javascript/auto\").tap(\"GlobalizePlugin\", (parser) => {\n      parser.hooks.call\n        .for(\"require\")\n        .tap(\"GlobalizePlugin\", (expr) => {\n          if (expr.arguments.length !== 1) {\n            return;\n          }\n          const param = parser.evaluateExpression(expr.arguments[0]);\n          const request = parser.state.current.request;\n\n          if(param.isString() && param.string === \"globalize\" && this.moduleFilter(request) &&\n            !(new RegExp(util.escapeRegex(this.i18nData))).test(request)) {\n\n            // Replace \"globalize\" with the dev bundle\n            const dep1 = new CommonJsRequireDependency(this.i18nData, param.range);\n            dep1.loc = expr.loc;\n            dep1.optional = !!parser.scope.inTry;\n            parser.state.current.addDependency(dep1);\n\n            // Replace 'require' by '__webpack_require__'\n            const dep2 = new RequireHeaderDependency(expr.callee.range);\n            dep2.loc = expr.loc;\n            parser.state.current.addDependency(dep2);\n\n            return true;\n          }\n        });\n    });\n    });\n  }\n}\n\nmodule.exports = DevelopmentModePlugin;\n"]},"metadata":{},"sourceType":"script"}