{"ast":null,"code":"var escodegen = require(\"escodegen\");\n\nvar esprima = require(\"esprima\");\n\nvar Syntax = esprima.Syntax;\nvar map = {\n  formatCurrency: \"currencyFormatter\",\n  formatDate: \"dateFormatter\",\n  formatDateToParts: \"dateToPartsFormatter\",\n  formatNumber: \"numberFormatter\",\n  formatRelativeTime: \"relativeTimeFormatter\",\n  formatUnit: \"unitFormatter\",\n  parseNumber: \"numberParser\",\n  parseDate: \"dateParser\",\n  plural: \"pluralGenerator\"\n};\nmodule.exports = {\n  test: function (node) {\n    return node.type === Syntax.CallExpression && node.callee.type === Syntax.MemberExpression && node.callee.object.type === Syntax.Identifier && node.callee.object.name === \"Globalize\" && node.callee.property.type === Syntax.Identifier && Object.keys(map).some(function (fn) {\n      return node.callee.property.name === fn;\n    });\n  },\n  getFormatterOrParser: function (node) {\n    return \"Globalize.\" + map[node.callee.property.name] + \"(\" + node.arguments.slice(1).map(function (argument) {\n      return escodegen.generate(argument);\n    }).join(\", \") + \")\";\n  }\n};","map":{"version":3,"sources":["C:/Users/guido/Documents/GitHub/myreactapp/node_modules/globalize-compiler/lib/extract-visitors/global-various-formatters-and-parsers-aliases.js"],"names":["escodegen","require","esprima","Syntax","map","formatCurrency","formatDate","formatDateToParts","formatNumber","formatRelativeTime","formatUnit","parseNumber","parseDate","plural","module","exports","test","node","type","CallExpression","callee","MemberExpression","object","Identifier","name","property","Object","keys","some","fn","getFormatterOrParser","arguments","slice","argument","generate","join"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAE,WAAF,CAAvB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAE,SAAF,CAArB;;AAEA,IAAIE,MAAM,GAAGD,OAAO,CAACC,MAArB;AAEA,IAAIC,GAAG,GAAG;AACTC,EAAAA,cAAc,EAAE,mBADP;AAETC,EAAAA,UAAU,EAAE,eAFH;AAGTC,EAAAA,iBAAiB,EAAE,sBAHV;AAITC,EAAAA,YAAY,EAAE,iBAJL;AAKTC,EAAAA,kBAAkB,EAAE,uBALX;AAMTC,EAAAA,UAAU,EAAE,eANH;AAOTC,EAAAA,WAAW,EAAE,cAPJ;AAQTC,EAAAA,SAAS,EAAE,YARF;AASTC,EAAAA,MAAM,EAAE;AATC,CAAV;AAYAC,MAAM,CAACC,OAAP,GAAiB;AAChBC,EAAAA,IAAI,EAAE,UAAUC,IAAV,EAAiB;AACtB,WAAOA,IAAI,CAACC,IAAL,KAAcf,MAAM,CAACgB,cAArB,IACNF,IAAI,CAACG,MAAL,CAAYF,IAAZ,KAAqBf,MAAM,CAACkB,gBADtB,IAENJ,IAAI,CAACG,MAAL,CAAYE,MAAZ,CAAmBJ,IAAnB,KAA4Bf,MAAM,CAACoB,UAF7B,IAGNN,IAAI,CAACG,MAAL,CAAYE,MAAZ,CAAmBE,IAAnB,KAA4B,WAHtB,IAINP,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBP,IAArB,KAA8Bf,MAAM,CAACoB,UAJ/B,IAKNG,MAAM,CAACC,IAAP,CAAYvB,GAAZ,EAAiBwB,IAAjB,CAAsB,UAASC,EAAT,EAAa;AAClC,aAAOZ,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAArB,KAA8BK,EAArC;AACA,KAFD,CALD;AAQA,GAVe;AAYhBC,EAAAA,oBAAoB,EAAE,UAAUb,IAAV,EAAiB;AACtC,WAAO,eAAeb,GAAG,CAAEa,IAAI,CAACG,MAAL,CAAYK,QAAZ,CAAqBD,IAAvB,CAAlB,GAAkD,GAAlD,GACNP,IAAI,CAACc,SAAL,CAAeC,KAAf,CAAsB,CAAtB,EAA0B5B,GAA1B,CAA8B,UAAU6B,QAAV,EAAqB;AAClD,aAAOjC,SAAS,CAACkC,QAAV,CAAoBD,QAApB,CAAP;AACA,KAFD,EAEGE,IAFH,CAES,IAFT,CADM,GAIN,GAJD;AAKA;AAlBe,CAAjB","sourcesContent":["var escodegen = require( \"escodegen\" );\nvar esprima = require( \"esprima\" );\n\nvar Syntax = esprima.Syntax;\n\nvar map = {\n\tformatCurrency: \"currencyFormatter\",\n\tformatDate: \"dateFormatter\",\n\tformatDateToParts: \"dateToPartsFormatter\",\n\tformatNumber: \"numberFormatter\",\n\tformatRelativeTime: \"relativeTimeFormatter\",\n\tformatUnit: \"unitFormatter\",\n\tparseNumber: \"numberParser\",\n\tparseDate: \"dateParser\",\n\tplural: \"pluralGenerator\"\n};\n\nmodule.exports = {\n\ttest: function( node ) {\n\t\treturn node.type === Syntax.CallExpression &&\n\t\t\tnode.callee.type === Syntax.MemberExpression &&\n\t\t\tnode.callee.object.type === Syntax.Identifier &&\n\t\t\tnode.callee.object.name === \"Globalize\" &&\n\t\t\tnode.callee.property.type === Syntax.Identifier &&\n\t\t\tObject.keys(map).some(function(fn) {\n\t\t\t\treturn node.callee.property.name === fn;\n\t\t\t});\n\t},\n\n\tgetFormatterOrParser: function( node ) {\n\t\treturn \"Globalize.\" + map[ node.callee.property.name ] + \"(\" +\n\t\t\tnode.arguments.slice( 1 ).map(function( argument ) {\n\t\t\t\treturn escodegen.generate( argument );\n\t\t\t}).join( \", \" ) +\n\t\t\t\")\";\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}